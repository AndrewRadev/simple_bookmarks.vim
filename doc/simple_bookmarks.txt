*simple_bookmarks.txt*	Save your current position with a named bookmark

==============================================================================
CONTENTS                            *simple-bookmarks* *simple-bookmarks-contents*

    Installation...........................: |simple-bookmarks-installation|
    Usage..................................: |simple-bookmarks-usage|
    Commands...............................: |simple-bookmarks-commands|
    Settings...............................: |simple-bookmarks-settings|
    Issues.................................: |simple-bookmarks-issues|


==============================================================================
INSTALLATION                                     *simple-bookmarks-installation*

The easiest way to install the plugin is with a plugin manager:

- vim-plug: https://github.com/junegunn/vim-plug
- Vundle:   https://github.com/VundleVim/Vundle.vim

If you use one, just follow the instructions in its documentation.

You can install the plugin yourself using Vim's |packages| functionality by
cloning the project (or adding it as a submodule) under
`~/.vim/pack/<any-name>/start/`. For example:
>
    git clone https://github.com/AndrewRadev/simple_bookmarks.vim ~/.vim/pack/_/start/simple_bookmarks
<
This should automatically load the plugin for you on Vim start. Alternatively,
you can add it to `~/.vim/pack/<any-name>/opt/` instead and load it in your
.vimrc manually with:
>
    packadd simple_bookmarks
<
If you'd rather not use git, you can download the files from the "releases"
tab and unzip them in the relevant directory:
https://github.com/AndrewRadev/simple_bookmarks.vim/releases.

==============================================================================
USAGE                                                   *simple-bookmarks-usage*

The |:BookmarkAdd| command accepts a name to store the bookmark. It will save
the current file and the cursor position to ~/.vim_bookmarks (by default).
Afterwards, you can use |:BookmarkGo| with a specific name to jump to that.
The command is tab-completed with all known names.

To delete a mark, use |:BookmarkDel|. It works exactly the same as
|:BookmarkGo| -- it accepts the name of the mark, which is tab-completed.

If you'd like to view all your bookmarks, you can use |:BookmarkQf| to load
them in the quickfix window.

In the quickfix window, pressing |dd| will delete a bookmark, and pressing |u|
will undo the deletion. Also, the quickfix window will auto-close when you
choose a bookmark. If you don't want these mappings, set the variable
|g:simple_bookmarks_no_qf_mappings| to 1. Also see
|g:simple_bookmarks_auto_close|.

If you'd like to have quicker ways to execute the commands, you could make
mappings to invoke them, something like this:
>
    nnoremap <leader>ba :BookmarkAdd<space>
    nnoremap <leader>bg :BookmarkGo<space>
    nnoremap <leader>bd :BookmarkDel<space>
    nnoremap <leader>bq :BookmarkQf<cr>
<
Note that bookmarks should be synchronized between vim instances. Anytime you
add a mark in one vim instance, it should be available in all others. In
practice, this is achieved by simply reading and writing the whole file on
each update. I have yet to experiment to find out if there are any performance
issues or race conditions. If you find any issues, please open a bug report on
github: https://github.com/AndrewRadev/simple_bookmarks.vim/issues

==============================================================================
COMMANDS                                             *simple-bookmarks-commands*

                                              *:BookmarkAdd*
:BookmarkAdd {name}  Saves the current file and cursor position as a bookmark
                     with the name {name}.

                                              *:BookmarkGo*
:BookmarkGo {name}   Opens up the bookmark associated with the name {name}.
                     Restores the cursor position the way it was at the time
                     the bookmark was created. Tab-completed with all known
                     bookmark names.

                                              *:BookmarkDel*
:BookmarkDel {name}  Deletes the bookmark named {name}. Tab-completed with all
                     known bookmark names.

                                              *:BookmarkQf*
:BookmarkQf      Shows all bookmarks in the quickfix window.

==============================================================================
SETTINGS                                             *simple-bookmarks-settings*

These are the variables that control the behaviour of the plugin.


                                                   *g:simple_bookmarks_filename*
>
    let g:simple_bookmarks_filename = '~/.vim_bookmarks'
<

Default value: '~/.vim_bookmarks'

This variable is the name of the file that stores the bookmarks. The actual
storage format is:
>
    bookmark name \t /path/to/file \t bufnum:lnum:col:off \t bookmarked line
<
In words, the four parts of a bookmark are tab-delimited, and the
second-to-last one, describing the cursor position, contains numbers that are
colon-delimited.


                                              *g:simple_bookmarks_long_quickfix*
>
    let g:simple_bookmarks_long_quickfix = 0
<

Default value: 0

The actual contents of the line are shown next to the bookmark's name. Setting
this variable to 1 would make them go underneath the line instead, making it
more readable, but possibly a bit more difficult to navigate.


                                                      *g:simple_bookmarks_signs*
>
    let g:simple_bookmarks_signs = 0
<

Default value: 0

Setting this variable to 1 would make the plugin place signs on bookmarked
lines, "->" by default. See |g:simple_bookmarks_sign_text| for changing the
sign's text.


                                                  *g:simple_bookmarks_sign_text*
>
    let g:simple_bookmarks_sign_text = '+'
<

Default value: "->"

If the |g:simple_bookmarks_signs| is set, this variable sets the text that
the sign will use.


                                                  *g:simple_bookmarks_highlight*
                                                                *SimpleBookmark*
>
    let g:simple_bookmarks_highlight = 0
<

Default value: 0

Setting this variable to 1 would make the plugin highlight bookmarked lines.
The syntax group that's highlighted is |SimpleBookmark| and it's linked to
|Search| by default. If you want to customize it, you can use Vim's built-in
|:highlight| command.

                                                 *g:simple_bookmarks_auto_close*
>
    let g:simple_bookmarks_auto_close = 1
<

Default value: 1

If this variable is set to 1, the plugin will automatically close the quickfix
window whenever a bookmark is chosen from it. Setting it to 0 disables this
special behaviour and leaves the quickfix window open.


                                                    *g:simple_bookmarks_new_tab*
>
    let g:simple_bookmarks_new_tab = 1
<

Default value: 0

If this variable is set to 1, the plugin will open bookmarks in a new tab
instead of using the standard quickfix window behaviour. This won't be in
effect if |g:simple_bookmarks_no_qf_mappings| is set to 1.

                                             *g:simple_bookmarks_no_qf_mappings*
>
    let g:simple_bookmarks_no_qf_mappings = 1
<

Default value: 0

If this variable is set to 1, no custom mappings will be defined in the
quickfix list.

                                                *g:simple_bookmarks_use_pattern*
>
    let g:simple_bookmarks_use_pattern = 1
<
Default value: 0

If set to 1, bookmarks will use their saved text lines as patterns in the
quickfix list. If you're using it to bookmark lines that might move over time,
this could make the bookmarks more reliable at the cost of losing the column
position (the quickfix will end up jumping to the beginning of the line).


==============================================================================
ISSUES                                                 *simple-bookmarks-issues*

- Deletion doesn't prompt before removing a bookmark. Maybe it should.
- The storage mechanism is dead simple and it's possible to break it, though
  it seems unlikely.

Any other issues and suggestions are very welcome on the github bugtracker:
https://github.com/AndrewRadev/simple_bookmarks.vim/issues


vim:tw=78:sw=4:ft=help:norl:
